import json
from typing import Tuple
import numpy as np
import sys

file = sys.argv[1]
with open(file) as fd:
    data = json.load(fd)
    # print(list((k, len(v)) for k, v in data.items()))
val = data["relative"]
val_classic = data["classic"]
val_variant = data["invariant"]
is_mirror = data.get("is_mirror", True)


def count_pieces(fen: str) -> Tuple[int ,int]:
    to_count = "prnbqk"
    data = [0, 0]
    for l in fen:
        if l.lower() in to_count:
            data[l in to_count] += 1
    return tuple(data)

total = sum(1 for fen in data["fens"] if sum(count_pieces(fen)) <= 7)

print(f"End games: {total/len(val_classic):.3%}")

print("Symmetry:", "Mirror" if is_mirror else "Axis")
print("Original:")
print(f"\tmean={np.mean(val_classic)} median={np.median(val_classic)} std={np.std(val_classic)}")
print("Filtered:")
f = [y for a, x, y in zip(val, val_classic, val_variant) if np.abs(a) < 1e-3 or y < x and y < .4]
print(f"\tmean={np.mean(f)} median={np.median(f)} std={np.std(f)}")
print("Filtered, no mates:")
f = [x for a, x, y in zip(val, val_classic, val_variant) if np.abs(a) < 1e-3 and x <= 100]
print([fen for a, x, y, fen in zip(val, val_classic, val_variant, data["fens"]) if x >= 100 and not ( y < x and y < 0.4)][:20])
print(f"\twithout diff. > 100: {len(f)/len(val):.2%} mean={np.mean(f)} median={np.median(f)} std={np.std(f)}")
f = [x for a, x, y in zip(val, val_classic, val_variant) if x >= 100]
pl = len(f)
print(f"\toriginal: {pl/len(val):.2%} mean={np.mean(f)} median={np.median(f)} std={np.std(f)}")
f = [y for a, x, y in zip(val, val_classic, val_variant) if x >= 100 and y < 0.4]
print(f"\tsorted: {(pl - len(f))/pl:.2%} mean={np.mean(f)} median={np.median(f)} std={np.std(f)}")
print("Invariant:")
print(f"\tmean={np.mean(val_variant)} median={np.median(val_variant)} std={np.std(val_variant)}")
val = [x for x, y in zip(val, val_classic) if y > 0]
total = np.sum(np.abs(np.asarray(val) - 1) < 1e-3)
total = sum(1 for x, y in zip(val_classic, val_variant) if x > 0 and y < x and y < 0.4)
print(f"number of cases where order explains variance: {total}/{len(val)} ({total/len(val):.3%})")